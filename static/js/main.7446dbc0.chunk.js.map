{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","Container","main","hours","Date","getHours","getTimeOfDay","Row","Col","xs","InputGroup","FormControl","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","newDate","date","getDate","month","getMonth","year","getFullYear","getDay","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAIMA,EACG,mCADHA,EAEI,2CAsFKC,MAnFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,MAF1B,mBAENG,EAFM,KAEGC,EAFH,KAsCX,OACA,qBAAKC,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,CAAWD,UAAYF,EACU,SAA5BA,EAAQA,QAAQ,GAAGI,KAAkB,gBACN,YAA5BJ,EAAQA,QAAQ,GAAGI,MAES,SAA5BJ,EAAQA,QAAQ,GAAGI,KACb,gBAAkB,gBAET,QA/BN,WACjB,IACIC,GADU,IAAIC,MACEC,WAKpB,OAFCF,EAAM,GAAKA,EAAM,GAAkB,MAAoB,QA0BlDG,GAAwB,eAAiB,iBAP/C,UAQE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,SACI,cAACC,EAAA,EAAD,CAAYV,UAAU,2BAAtB,SACI,cAACW,EAAA,EAAD,CAAaX,UAAU,eACtBY,YAAa,YACbC,SAAU,SAAAC,GAAC,OAAIjB,EAASiB,EAAEC,OAAOC,QACjCA,MAAOpB,EACPqB,WAnDF,SAACC,GACG,UAAZA,EAAIC,KACHC,MAAM,GAAD,OAAI3B,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACrD4B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFzB,EAAWyB,GACX3B,EAAS,IACT4B,QAAQC,IAAIF,eAiDtB,cAACjB,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAKC,GAAI,GAAIT,UAAW,eAAxB,UACI,oBAAIA,UAAW,YAAf,SACKF,EAAWA,EAAQ6B,KAAO,KAAO7B,EAAQ8B,IAAIC,QAAW,KAE7D,oBAAI7B,UAAW,OAAf,SAvCE,WACZ,IAEI8B,EAAU,IAAI1B,KACd2B,EAAOD,EAAQE,UACfC,EAJW,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAIzGH,EAAQI,WAAa,GACtCC,EAAOL,EAAQM,cAEnB,MAAM,GAAN,OAAUH,EAAV,YAAmBF,EAAnB,aAA4BI,EAA5B,cANa,CAAC,MAAO,MAAO,OAAQ,SAAU,QAAS,MAAO,SAMjBL,EAAQO,UAArD,OA+BkCL,KACtBlC,EACE,qBAAKE,UAAW,kBAAhB,SACI,qBAAIA,UAAW,cAAf,UACKsC,KAAKC,MAAMzC,EAAQI,KAAKsC,MAD7B,cAFK,GAOb,oBAAIxC,UAAW,oBAAf,SACKF,EAAWA,EAAQA,QAAQ,GAAGI,KAAQ,gBCrE5CuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7446dbc0.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Col, Container, FormControl, InputGroup, Row} from \"react-bootstrap\";\r\n\r\nconst api = {\r\n    key: \"050f1f478868a2ca92fd19034bae70c5\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nfunction App() {\r\n  const [query, setQuery] = useState('');\r\n  const [weather, setWeather] = useState(null);\r\n\r\n  const search = (evt: { key: string; }) => {\r\n      if(evt.key === \"Enter\"){\r\n          fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n              .then(res => res.json())\r\n              .then(result => {\r\n                  setWeather(result);\r\n                  setQuery('');\r\n                  console.log(result);\r\n              });\r\n      }\r\n  }\r\n\r\n  const getTimeOfDay = () => {\r\n      let newDate = new Date()\r\n      let hours = newDate.getHours();\r\n      let timeOfDay = null;\r\n\r\n      (hours>6 && hours<18) ? timeOfDay = \"day\" : timeOfDay = \"night\";\r\n\r\n      return timeOfDay;\r\n  }\r\n\r\n  const getDate = () => {\r\n      let monthArr = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n      let dayArr = [\"Sun\", \"Mon\", \"Tues\", \"Wednes\", \"Thurs\", \"Fri\", \"Satur\"]\r\n      let newDate = new Date()\r\n      let date = newDate.getDate();\r\n      let month = monthArr[newDate.getMonth() + 1];\r\n      let year = newDate.getFullYear();\r\n\r\n      return `${month} ${date}, ${year} - ${dayArr[newDate.getDay()]}day`\r\n\r\n  }\r\n\r\n    return (\r\n    <div className=\"App\">\r\n      <Container className={ weather ?\r\n          (weather.weather[0].main === \"Snow\" ? \"app-body snow\" : (\r\n              weather.weather[0].main === \"Drizzle\"\r\n              ||\r\n              weather.weather[0].main === \"Rain\"\r\n                  ? \"app-body rain\" : \"app-body warm\"\r\n          ))\r\n          : getTimeOfDay()===\"day\"? \"app-body day\" : \"app-body night\"}>\r\n        <Row>\r\n          <Col xs={12}>\r\n              <InputGroup className=\"text-center search-group\">\r\n                  <FormControl className=\"search-input\"\r\n                   placeholder={\"Search...\"}\r\n                   onChange={e => setQuery(e.target.value)}\r\n                   value={query}\r\n                   onKeyPress={search}\r\n                  />\r\n              </InputGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col xs={12} className={\"weather-text\"}>\r\n                <h1 className={\"city-name\"}>\r\n                    {weather ? (weather.name + \", \" + weather.sys.country) : \"\"}\r\n                </h1>\r\n                <h3 className={\"date\"}>{getDate()}</h3>\r\n                {!weather ? (\"\") : (\r\n                    <div className={\"temperature-box\"}>\r\n                        <h1 className={\"temperature\"}>\r\n                            {Math.round(weather.main.temp)}&deg; C\r\n                        </h1>\r\n                    </div>\r\n                )}\r\n                <h3 className={\"weather-condition\"}>\r\n                    {weather ? (weather.weather[0].main) : \"\"}\r\n                </h3>\r\n            </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}